//! The type generated by the parser. It can then be evaluated by the
//! evaluator.

use stack::Stack;

/// A node in the syntax tree.
pub enum SyntaxNode {
    /// A function name
    Function(String),
    /// An atom
    Atom(i64),
}

/// A syntax tree generated by the parser.
#[allow(dead_code)]
pub struct SyntaxTree {
    /// The tree itself.
    tree: Stack<SyntaxNode>,
}

impl SyntaxTree {
    /// Get a new syntax tree.
    pub fn new() -> SyntaxTree {
        SyntaxTree { tree: Stack::new() }
    }
}

impl Into<String> for SyntaxTree {
    /// Convert the syntax tree into a string. This is currently a placeholder.
    fn into(self) -> String {
        "Syntax Tree".to_string()
    }
}
